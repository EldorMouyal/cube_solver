# -*- coding: utf-8 -*-
"""helperForProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lTeC8NCqZ84xRJjKnYzzjCieszFiUwYG

Code for straight lines
"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.lines as mlines

# Read the image
image = cv2.imread('/content/rubiks mixed image.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the threshold parameters
threshold1 = 50
threshold2 = 150

# Detect edges using Canny Edge Detector
edges = cv2.Canny(gray, threshold1, threshold2)

# Define the minimum and maximum angle (in radians) for the lines
min_angle = (0) * np.pi / 180  # Convert to radians
max_angle = (5) * np.pi / 180  # Convert to radians

# Detect lines using Hough Line Transform
lines = cv2.HoughLines(edges, 1.5, np.pi / 180, 100, min_theta=min_angle, max_theta=max_angle)

# Draw the detected lines on the original image
if lines is not None:
    for rho, theta in lines[:, 0]:
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Save the image with detected lines
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)
print(f"Image with detected lines saved to {output_image_path}")

"""Code for small angles"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.lines as mlines

# Read the image
image = cv2.imread('/content/rubiks mixed image.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the threshold parameters
threshold1 = 50
threshold2 = 150

# Detect edges using Canny Edge Detector
edges = cv2.Canny(gray, threshold1, threshold2)

# Define the minimum and maximum angle (in radians) for the lines
min_angle = (5) * np.pi / 180  # Convert to radians
max_angle = (90) * np.pi / 180  # Convert to radians

# Detect lines using Hough Line Transform
lines = cv2.HoughLines(edges, 1.5, np.pi / 180, 77, min_theta=min_angle, max_theta=max_angle)

# Draw the detected lines on the original image
if lines is not None:
    for rho, theta in lines[:, 0]:
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Save the image with detected lines
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)
print(f"Image with detected lines saved to {output_image_path}")

"""Code for large angles"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.lines as mlines

# Read the image
image = cv2.imread('/content/rubiks mixed image.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the threshold parameters
threshold1 = 50
threshold2 = 150

# Detect edges using Canny Edge Detector
edges = cv2.Canny(gray, threshold1, threshold2)

# Define the minimum and maximum angle (in radians) for the lines
min_angle = (95) * np.pi / 180  # Convert to radians
max_angle = (175) * np.pi / 180  # Convert to radians

# Detect lines using Hough Line Transform
lines = cv2.HoughLines(edges, 1.5, np.pi / 180, 78, min_theta=min_angle, max_theta=max_angle)

# Draw the detected lines on the original image
if lines is not None:
    for rho, theta in lines[:, 0]:
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Save the image with detected lines
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)
print(f"Image with detected lines saved to {output_image_path}")

"""Code detecting all angles using HoughLineP"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.lines as mlines

# Read the image
image = cv2.imread('/content/rubiks mixed image.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the threshold parameters
threshold1 = 50
threshold2 = 150

# Detect edges using Canny Edge Detector
edges = cv2.Canny(gray, threshold1, threshold2)

# Detect lines using Probabilistic Hough Line Transform
lines = cv2.HoughLinesP(edges, 5, np.pi / 180, threshold=50, minLineLength=50, maxLineGap=12.5)

# Draw the detected lines on the original image
if lines is not None:
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv2.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Save the image with detected lines
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)
print(f"Image with detected lines saved to {output_image_path}")

"""Code detecting all angles using HoughLine"""

import cv2
import numpy as np
from matplotlib import pyplot as plt
import matplotlib.lines as mlines

# Read the image
image = cv2.imread('/content/rubiks mixed image.jpeg')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Define the threshold parameters
threshold1 = 50
threshold2 = 150

# Detect edges using Canny Edge Detector
edges = cv2.Canny(gray, threshold1, threshold2)

# Define the minimum and maximum angle (in radians) for the lines
min_angle = (0) * np.pi / 180  # Convert to radians
max_angle = (175) * np.pi / 180  # Convert to radians

# Detect lines using Hough Line Transform
lines = cv2.HoughLines(edges, 1.7, np.pi / 180, 87, min_theta=min_angle, max_theta=max_angle)

# Draw the detected lines on the original image
if lines is not None:
    for rho, theta in lines[:, 0]:
        a = np.cos(theta)
        b = np.sin(theta)
        x0 = a * rho
        y0 = b * rho
        x1 = int(x0 + 1000 * (-b))
        y1 = int(y0 + 1000 * (a))
        x2 = int(x0 - 1000 * (-b))
        y2 = int(y0 - 1000 * (a))
        cv2.line(image, (x1, y1), (x2, y2), (0, 0, 255), 2)

# Save the image with detected lines
output_image_path = 'output_image.jpg'
cv2.imwrite(output_image_path, image)
print(f"Image with detected lines saved to {output_image_path}")